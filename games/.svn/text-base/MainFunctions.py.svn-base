from localdefs import *
from localclasses import *
import pygame
from pygame.locals import *
import EventFunctions
import sys

def makeIcons():
    for num in range(1,player.modDict['towerNum']+1):
        Icon(num)
    del openbuttoninfo[:]
    openbuttoninfo.append(pygame.Surface((iconlist[len(iconlist)-1].rect.right+5,25)))
    openbuttoninfo.append(pygame.Rect((0,scrhei-25),(iconlist[len(iconlist)-1].rect.right+5,25)))
    openbuttoninfo[0].fill((255,255,255))

def tickAndClear(screen,clock,background,frametime):
    clock.tick(30)
    screen.blit(background,(0,0))
    player.currentChain = max(player.currentChain-frametime/350.0,0)

def workSenders(frametime):
    for sender in senderlist:
        sender.tick(frametime)

def workTowers(screen,frametime):
    for tower in towerlist:
        tower.takeTurn(frametime,screen)

def dispExplosions(screen):
    #Display any explosions in the queue, then remove them.
    for rect in explosions:
        screen.blit(imgLoad('explosion.png'),rect)
        explosions.remove(rect)

def dispText(screen,wavenum):
    #This displays the basic status at the top left.
    font = pygame.font.Font(None,20)
    text1 = font.render("Wave: %d |" % (wavenum),1,(0,0,0))
    textpos1 = text1.get_rect(left=10,top=5)
    text3 = font.render("Money: %0.1f |" % (player.money),1,(0,0,0))
    textpos3 = text3.get_rect(left=10,top=textpos1.bottom+2)

    n = min(textpos1,textpos3,key=lambda k:k.right)
    x = max(textpos1,textpos3,key=lambda k:k.right)

    n.right = x.right

    text2 = font.render(" %d :Health" % (player.health),1,(0,0,0))
    textpos2 = text2.get_rect(left=textpos1.right,top=textpos1.top)
    text4 = font.render(" Press 'N' to send next wave!",1,(255,255,255))
    textpos4 = text4.get_rect(left=textpos3.right,top=textpos3.top)

    for i in range(1,5):
        screen.blit(eval("text"+str(i)),eval("textpos"+str(i)))

    font = pygame.font.Font(None,28)
    t = font.render("Chain: %4.1f%%" % (player.currentChain*100),1,(255,255,255))
    tp = t.get_rect(right=scrwid-10,centery=textpos1.bottom+1)
    screen.blit(t,tp)

    pygame.draw.rect(screen,(0,0,0),mapvar.xpbar,2)
    curbar = mapvar.xpbar.inflate(-2,-4)
    curbar.width = int(curbar.width*player.curXP/player.maxXP)
    curbar.topleft = mapvar.xpbar.topleft
    pygame.draw.rect(screen,(255,255,255),curbar.move(2,2),0)
    font = pygame.font.Font(None,30)
    text5 = font.render("%d" % player.curLV,1,(255,0,0))
    textpos5 = text5.get_rect(center=mapvar.xpbar.center)
    screen.blit(text5,textpos5)

def workEnemies(screen,frametime):
    #Let the enemies do their thing. Move, draw to screen, draw health bars.
    for enemy in enemylist:
        enemy.takeTurn(frametime,screen)
        screen.blit(enemy.image,enemy.rect)
        pygame.draw.line(screen, (0,0,0), (enemy.rect.left,enemy.rect.top-2), (enemy.rect.right,enemy.rect.top-2), 3)
        if enemy.poisontimer:
            pygame.draw.line(screen, (0,255,0), (enemy.rect.left,enemy.rect.top-2), (enemy.rect.left+(enemy.health*1.0/enemy.starthealth*1.0)*enemy.rect.width,enemy.rect.top-2), 3)
        else:
            pygame.draw.line(screen, (255,0,0), (enemy.rect.left,enemy.rect.top-2), (enemy.rect.left+(enemy.health*1.0/enemy.starthealth*1.0)*enemy.rect.width,enemy.rect.top-2), 3)

def dispStructures(screen,mousepos):
    for struct in (towerlist):
        screen.blit(struct.image,struct.rect)
        pygame.draw.line(screen, (0,0,0), (struct.rect.left,struct.rect.top-2), (struct.rect.right,struct.rect.top-2), 3)
        if struct.hp>0:
            pygame.draw.line(screen, (255,0,0), (struct.rect.left,struct.rect.top-2), (struct.rect.left+(struct.hp*1.0/struct.maxhp*1.0)*struct.rect.width,struct.rect.top-2), 3)
        else:
            pygame.draw.line(screen, (200,200,200), (struct.rect.left,struct.rect.top-2), (struct.rect.left+(struct.hp*1.0/(-10.0))*struct.rect.width,struct.rect.top-2), 3)
        if struct.rect.collidepoint(mousepos):
            rn = int(struct.range)
            area = pygame.Surface((2*rn,2*rn),SRCALPHA)
            pygame.draw.circle(area,(255,255,255,85),(rn,rn),rn,0)
            screen.blit(area,struct.rect.move((-1*rn,-1*rn)).center)

def selectedIcon(screen,selected):
    mouseat = roundRect(selected.img.get_rect(center=pygame.mouse.get_pos()))
    screen.blit(selected.img,mouseat)
    if selected.base == "Tower":
        rn = int(player.modDict['tower'][selected.num]['range'])
        area = pygame.Surface((2*rn,2*rn),SRCALPHA)
        pygame.draw.circle(area,(255,0,0,75),(rn,rn),rn,0)
        screen.blit(area,mouseat.move((-1*rn,-1*rn)).center)

def selectedTower(screen,selected,mousepos):
    selected.genButtons(screen)
    for img,rect,info,infopos,cb in selected.buttonlist:
        screen.blit(img,rect)
        if rect.collidepoint(mousepos):
            screen.blit(info,infopos)
    

def dispIcons(screen,mousepos,font,frametime):
    isover = 0
    for icon in iconlist:
        screen.blit(icon.img,icon.rect)
        if icon.rect.collidepoint(mousepos):
            isover = 1
            if icon is mapvar.iconhold[0]:
                mapvar.iconhold = (icon,mapvar.iconhold[1]+frametime)
                if mapvar.iconhold[1]>3:
                    text = font.render("Speed %0.2f" % (player.modDict['tower'][icon.num]['startTargetTimer']),1,(0,0,0))
                    textpos = text.get_rect(left=icon.rect.left,bottom=icon.rect.top-2)
                    screen.blit(text,textpos)
                    text = font.render("Damage %0.2f" % (player.modDict['tower'][icon.num]['damAmt']),1,(0,0,0))
                    textpos = text.get_rect(left=icon.rect.left,bottom=textpos.top-2)
                    screen.blit(text,textpos)
                    text = font.render("Range %0.2f" % (player.modDict['tower'][icon.num]['range']),1,(0,0,0))
                    textpos = text.get_rect(left=icon.rect.left,bottom=textpos.top-2)
                    screen.blit(text,textpos)
                    text = font.render("Armor Class %0.2f" % (player.modDict['tower'][icon.num]['ac']),1,(0,0,0))
                    textpos = text.get_rect(left=icon.rect.left,bottom=textpos.top-2)
                    screen.blit(text,textpos)
                    text = font.render("Max HP %0.2f" % (player.modDict['tower'][icon.num]['maxhp']),1,(0,0,0))
                    textpos = text.get_rect(left=icon.rect.left,bottom=textpos.top-2)
                    screen.blit(text,textpos)
                    text = font.render("Cost %0.2f" % (player.modDict['tower'][icon.num]['cost']),1,(0,0,0))
                    textpos = text.get_rect(left=icon.rect.left,bottom=textpos.top-2)
                    screen.blit(text,textpos)
                    text = font.render("Tower %d" % (icon.num),1,(255,255,255))
                    textpos = text.get_rect(left=icon.rect.left,bottom=textpos.top-3)
                    screen.blit(text,textpos)
                else:
                    text = font.render("Tower %d (%0.1f)" % (icon.num,player.modDict['tower'][icon.num]['cost']),1,(0,0,0))
                    textpos = text.get_rect(left=icon.rect.left,bottom=icon.rect.top-2)
                    screen.blit(text,textpos)
            else:
                mapvar.iconhold = (icon,frametime)
                text = font.render("Tower %d (%0.1f)" % (icon.num,player.modDict['tower'][icon.num]['cost']),1,(0,0,0))
                textpos = text.get_rect(left=icon.rect.left,bottom=icon.rect.top-2)
                screen.blit(text,textpos)
    if isover == 0:
        mapvar.iconhold = (None,0)

def roundPoint(point):
    x = squsize*(point[0]/squsize)
    y = squsize*(point[1]/squsize)
    return (x,y)

def roundRect(rect):
    new = rect.copy()
    new.topleft = roundPoint((rect.centerx,rect.centery))
    return new

def workEvents(screen,selected,wavenum,Sender,speed,font,font2):
    timedel = 0
    for event in pygame.event.get():
        if event.type == QUIT:
            sys.exit()
        elif event.type == MOUSEBUTTONUP:
            selected,mBUb,timedel = EventFunctions.mouseButtonUp(event, selected, screen, font,font2)
        else:
            keyinput = pygame.key.get_pressed()
            if keyinput[K_ESCAPE]:
                sys.exit()
            elif event.type==KEYDOWN and event.dict['key']==K_n:
                wavenum = EventFunctions.nextWave(event, wavenum, Sender)
            elif keyinput[K_f]:
                screen = pygame.display.set_mode((scrwid,scrhei),FULLSCREEN)
            elif keyinput[K_w]:
                screen = pygame.display.set_mode((scrwid,scrhei))
            elif keyinput[K_UP]:
                if speed<10:
                    speed+=1
                    print speed
            elif keyinput[K_DOWN]:
                if speed>1:
                    speed-=1
                    print speed
    return screen,selected,wavenum,speed,timedel